
HWP1_Assignments.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800200  00000880  00000914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080027a  0080027a  0000098e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fae  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9b  00000000  00000000  00001a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000690  00000000  00000000  000027f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f8  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039a  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000390a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 37       	cpi	r26, 0x7A	; 122
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e7       	ldi	r26, 0x7A	; 122
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 38       	cpi	r26, 0x80	; 128
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	79 d0       	rcall	.+242    	; 0x212 <main>
 120:	ad c3       	rjmp	.+1882   	; 0x87c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_keys>:
#include <avr/io.h>
#include <stdio.h>
#include "buttons.h"

void init_keys() {
	DDRC &= ~(0x3F); //0bxx000000
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7c       	andi	r24, 0xC0	; 192
 128:	87 b9       	out	0x07, r24	; 7
    DDRD &= ~(0x0C); //0bxxxx00xx  
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	83 7f       	andi	r24, 0xF3	; 243
 12e:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0x3F;
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 63       	ori	r24, 0x3F	; 63
 134:	88 b9       	out	0x08, r24	; 8
    PORTD |= 0x0C;
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8c 60       	ori	r24, 0x0C	; 12
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	08 95       	ret

0000013e <get_key>:
}

int8_t get_key(uint8_t key_no) {
	if (key_no > 8 || key_no < 1) {
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	48 f0       	brcs	.+18     	; 0x156 <get_key+0x18>
		printf("Incorrect button number entered.");
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9f 93       	push	r25
 14a:	8f 93       	push	r24
 14c:	d7 d0       	rcall	.+430    	; 0x2fc <printf>
		return ERROR;
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	08 95       	ret

    key_no -= 1;
    uint8_t mask; // Mask for checking the pin status

    // Determine the mask and the port based on the button number
    if (key_no < 6) { // For PC0 to PC5 (button0 to button5)
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	70 f4       	brcc	.+28     	; 0x176 <get_key+0x38>
        mask = 1 << key_no;
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <get_key+0x28>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <get_key+0x24>
 16a:	ca 01       	movw	r24, r20
        if ((PINC & mask) == 0) {
 16c:	96 b1       	in	r25, 0x06	; 6
 16e:	89 23       	and	r24, r25
 170:	91 f0       	breq	.+36     	; 0x196 <get_key+0x58>
        if ((PIND & mask) == 0) {
            return ON;
        }
    }

    return OFF;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
        if ((PINC & mask) == 0) {
            return ON;
        }
    }
    else { // For PD2 to PD3 (button6 to button7)
        mask = 1 << (key_no - 6 + 2); // key_no - 6 gives 0 for button6 and 1 for button7, +2 adjusts for PD2, PD3
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	04 97       	sbiw	r24, 0x04	; 4
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	a9 01       	movw	r20, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <get_key+0x48>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <get_key+0x44>
 18a:	ca 01       	movw	r24, r20
        if ((PIND & mask) == 0) {
 18c:	99 b1       	in	r25, 0x09	; 9
 18e:	89 23       	and	r24, r25
 190:	21 f0       	breq	.+8      	; 0x19a <get_key+0x5c>
            return ON;
        }
    }

    return OFF;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

    // Determine the mask and the port based on the button number
    if (key_no < 6) { // For PC0 to PC5 (button0 to button5)
        mask = 1 << key_no;
        if ((PINC & mask) == 0) {
            return ON;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
        }
    }
    else { // For PD2 to PD3 (button6 to button7)
        mask = 1 << (key_no - 6 + 2); // key_no - 6 gives 0 for button6 and 1 for button7, +2 adjusts for PD2, PD3
        if ((PIND & mask) == 0) {
            return ON;
 19a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return OFF;
}
 19c:	08 95       	ret

0000019e <init_leds>:
#include <avr/io.h>
#include "led_array.h"


void init_leds() {
	DDRA = 0xFF;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
 1a2:	82 b9       	out	0x02, r24	; 2
 1a4:	08 95       	ret

000001a6 <set_led>:
}

int8_t set_led(uint8_t led_no, uint8_t state) {
	if (led_no < 1 || led_no > 8) {
 1a6:	81 50       	subi	r24, 0x01	; 1
 1a8:	88 30       	cpi	r24, 0x08	; 8
 1aa:	48 f0       	brcs	.+18     	; 0x1be <set_led+0x18>
		printf("Incorrect LED number entered.");
 1ac:	81 e2       	ldi	r24, 0x21	; 33
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	9f 93       	push	r25
 1b2:	8f 93       	push	r24
 1b4:	a3 d0       	rcall	.+326    	; 0x2fc <printf>
		return ERROR;
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	08 95       	ret
	}
	if (state != ON && state != OFF) {
 1be:	62 30       	cpi	r22, 0x02	; 2
 1c0:	48 f0       	brcs	.+18     	; 0x1d4 <set_led+0x2e>
		printf("Incorrect state entered.");
 1c2:	8f e3       	ldi	r24, 0x3F	; 63
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	9f 93       	push	r25
 1c8:	8f 93       	push	r24
 1ca:	98 d0       	rcall	.+304    	; 0x2fc <printf>
		return ERROR;
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	8f ef       	ldi	r24, 0xFF	; 255
 1d2:	08 95       	ret
	}
	led_no -= 1;
	if (!state) {
 1d4:	61 11       	cpse	r22, r1
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <set_led+0x4e>
		PORTA |= _BV(led_no);
 1d8:	42 b1       	in	r20, 0x02	; 2
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <set_led+0x40>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <set_led+0x3c>
 1ea:	cb 01       	movw	r24, r22
 1ec:	84 2b       	or	r24, r20
 1ee:	82 b9       	out	0x02, r24	; 2
		return SUCCESS;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	08 95       	ret
	}
	else {
		PORTA &= ~_BV(led_no);
 1f4:	42 b1       	in	r20, 0x02	; 2
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <set_led+0x5c>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <set_led+0x58>
 206:	cb 01       	movw	r24, r22
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	82 b9       	out	0x02, r24	; 2
		return SUCCESS;
 20e:	82 e0       	ldi	r24, 0x02	; 2
	}
}
 210:	08 95       	ret

00000212 <main>:
#include <util/delay.h>
#include "leds/led_array.h"
#include "buttons/buttons.h"

int main(void)
{ 
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	2c 97       	sbiw	r28, 0x0c	; 12
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	init_leds();
 226:	bb df       	rcall	.-138    	; 0x19e <init_leds>
	init_keys();
 228:	7d df       	rcall	.-262    	; 0x124 <init_keys>
 22a:	fe 01       	movw	r30, r28
	
	uint8_t last_state[6] = {0}; // Stores the last state to minimize unnecessary writes
 22c:	31 96       	adiw	r30, 0x01	; 1
 22e:	86 e0       	ldi	r24, 0x06	; 6
 230:	df 01       	movw	r26, r30
 232:	1d 92       	st	X+, r1
 234:	8a 95       	dec	r24
 236:	e9 f7       	brne	.-6      	; 0x232 <main+0x20>

	while (1) 
    {
		// ASSIGNMENT 1
		
		uint8_t button1_val = get_key(1) == ON; 
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	81 df       	rcall	.-254    	; 0x13e <get_key>
 23c:	18 2f       	mov	r17, r24
 23e:	01 e0       	ldi	r16, 0x01	; 1
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	09 f0       	breq	.+2      	; 0x246 <main+0x34>
 244:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t button2_val = get_key(2) == ON;
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	7a df       	rcall	.-268    	; 0x13e <get_key>
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	09 f0       	breq	.+2      	; 0x252 <main+0x40>
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	11 30       	cpi	r17, 0x01	; 1

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
			button1_val && button2_val,
 254:	21 f4       	brne	.+8      	; 0x25e <main+0x4c>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	21 f0       	breq	.+8      	; 0x262 <main+0x50>
 25a:	20 e0       	ldi	r18, 0x00	; 0
 25c:	03 c0       	rjmp	.+6      	; 0x264 <main+0x52>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	01 c0       	rjmp	.+2      	; 0x264 <main+0x52>
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	2f 83       	std	Y+7, r18	; 0x07
		
		uint8_t button1_val = get_key(1) == ON; 
		uint8_t button2_val = get_key(2) == ON;

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
 266:	11 30       	cpi	r17, 0x01	; 1
			button1_val && button2_val,
			button1_val || button2_val,
 268:	21 f0       	breq	.+8      	; 0x272 <main+0x60>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	21 f4       	brne	.+8      	; 0x276 <main+0x64>
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	03 c0       	rjmp	.+6      	; 0x278 <main+0x66>
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <main+0x66>
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	28 87       	std	Y+8, r18	; 0x08
		
		uint8_t button1_val = get_key(1) == ON; 
		uint8_t button2_val = get_key(2) == ON;

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
 27a:	20 2f       	mov	r18, r16
 27c:	29 27       	eor	r18, r25
 27e:	29 87       	std	Y+9, r18	; 0x09
 280:	11 30       	cpi	r17, 0x01	; 1
			button1_val && button2_val,
			button1_val || button2_val,
			button1_val ^ button2_val,
			!(button1_val && button2_val),
 282:	21 f4       	brne	.+8      	; 0x28c <main+0x7a>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	21 f0       	breq	.+8      	; 0x290 <main+0x7e>
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	03 c0       	rjmp	.+6      	; 0x292 <main+0x80>
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	01 c0       	rjmp	.+2      	; 0x292 <main+0x80>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	2a 87       	std	Y+10, r18	; 0x0a
		
		uint8_t button1_val = get_key(1) == ON; 
		uint8_t button2_val = get_key(2) == ON;

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
 294:	11 30       	cpi	r17, 0x01	; 1
			button1_val && button2_val,
			button1_val || button2_val,
			button1_val ^ button2_val,
			!(button1_val && button2_val),
			!(button1_val || button2_val),
 296:	21 f0       	breq	.+8      	; 0x2a0 <main+0x8e>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	21 f4       	brne	.+8      	; 0x2a4 <main+0x92>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <main+0x94>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <main+0x94>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	8b 87       	std	Y+11, r24	; 0x0b
		
		uint8_t button1_val = get_key(1) == ON; 
		uint8_t button2_val = get_key(2) == ON;

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
 2a8:	81 e0       	ldi	r24, 0x01	; 1
			button1_val && button2_val,
			button1_val || button2_val,
			button1_val ^ button2_val,
			!(button1_val && button2_val),
			!(button1_val || button2_val),
			!(button1_val ^ button2_val)
 2aa:	09 13       	cpse	r16, r25
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	8c 87       	std	Y+12, r24	; 0x0c
		
		uint8_t button1_val = get_key(1) == ON; 
		uint8_t button2_val = get_key(2) == ON;

		// Check if the state has changed before updating the LED
		uint8_t new_state[6] = {
 2b0:	10 e0       	ldi	r17, 0x00	; 0
			!(button1_val && button2_val),
			!(button1_val || button2_val),
			!(button1_val ^ button2_val)
		};

		for (uint8_t i = 0; i < 6; i++) {
 2b2:	21 c0       	rjmp	.+66     	; 0x2f6 <main+0xe4>
 2b4:	e1 2e       	mov	r14, r17
			if (new_state[i] != last_state[i]) {
 2b6:	f1 2c       	mov	r15, r1
 2b8:	e7 e0       	ldi	r30, 0x07	; 7
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	ec 0f       	add	r30, r28
 2be:	fd 1f       	adc	r31, r29
 2c0:	ee 0d       	add	r30, r14
 2c2:	ff 1d       	adc	r31, r15
 2c4:	00 81       	ld	r16, Z
 2c6:	e1 e0       	ldi	r30, 0x01	; 1
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	ec 0f       	add	r30, r28
 2cc:	fd 1f       	adc	r31, r29
 2ce:	ee 0d       	add	r30, r14
 2d0:	ff 1d       	adc	r31, r15
 2d2:	80 81       	ld	r24, Z
 2d4:	08 17       	cp	r16, r24
 2d6:	71 f0       	breq	.+28     	; 0x2f4 <main+0xe2>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
				set_led(i + 1, new_state[i] ? ON : OFF);
 2da:	01 11       	cpse	r16, r1
 2dc:	01 c0       	rjmp	.+2      	; 0x2e0 <main+0xce>
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	81 0f       	add	r24, r17
 2e4:	60 df       	rcall	.-320    	; 0x1a6 <set_led>
 2e6:	e1 e0       	ldi	r30, 0x01	; 1
				last_state[i] = new_state[i];
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ec 0f       	add	r30, r28
 2ec:	fd 1f       	adc	r31, r29
 2ee:	ee 0d       	add	r30, r14
 2f0:	ff 1d       	adc	r31, r15
 2f2:	00 83       	st	Z, r16
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
			!(button1_val && button2_val),
			!(button1_val || button2_val),
			!(button1_val ^ button2_val)
		};

		for (uint8_t i = 0; i < 6; i++) {
 2f6:	16 30       	cpi	r17, 0x06	; 6
 2f8:	e8 f2       	brcs	.-70     	; 0x2b4 <main+0xa2>
 2fa:	9e cf       	rjmp	.-196    	; 0x238 <main+0x26>

000002fc <printf>:
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	ae 01       	movw	r20, r28
 306:	4a 5f       	subi	r20, 0xFA	; 250
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	fa 01       	movw	r30, r20
 30c:	61 91       	ld	r22, Z+
 30e:	71 91       	ld	r23, Z+
 310:	af 01       	movw	r20, r30
 312:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end+0x2>
 316:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x3>
 31a:	03 d0       	rcall	.+6      	; 0x322 <vfprintf>
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <vfprintf>:
 322:	2f 92       	push	r2
 324:	3f 92       	push	r3
 326:	4f 92       	push	r4
 328:	5f 92       	push	r5
 32a:	6f 92       	push	r6
 32c:	7f 92       	push	r7
 32e:	8f 92       	push	r8
 330:	9f 92       	push	r9
 332:	af 92       	push	r10
 334:	bf 92       	push	r11
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	2b 97       	sbiw	r28, 0x0b	; 11
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	6c 01       	movw	r12, r24
 358:	7b 01       	movw	r14, r22
 35a:	8a 01       	movw	r16, r20
 35c:	fc 01       	movw	r30, r24
 35e:	17 82       	std	Z+7, r1	; 0x07
 360:	16 82       	std	Z+6, r1	; 0x06
 362:	83 81       	ldd	r24, Z+3	; 0x03
 364:	81 ff       	sbrs	r24, 1
 366:	bf c1       	rjmp	.+894    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	3c 01       	movw	r6, r24
 36e:	f6 01       	movw	r30, r12
 370:	93 81       	ldd	r25, Z+3	; 0x03
 372:	f7 01       	movw	r30, r14
 374:	93 fd       	sbrc	r25, 3
 376:	85 91       	lpm	r24, Z+
 378:	93 ff       	sbrs	r25, 3
 37a:	81 91       	ld	r24, Z+
 37c:	7f 01       	movw	r14, r30
 37e:	88 23       	and	r24, r24
 380:	09 f4       	brne	.+2      	; 0x384 <vfprintf+0x62>
 382:	ad c1       	rjmp	.+858    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 384:	85 32       	cpi	r24, 0x25	; 37
 386:	39 f4       	brne	.+14     	; 0x396 <vfprintf+0x74>
 388:	93 fd       	sbrc	r25, 3
 38a:	85 91       	lpm	r24, Z+
 38c:	93 ff       	sbrs	r25, 3
 38e:	81 91       	ld	r24, Z+
 390:	7f 01       	movw	r14, r30
 392:	85 32       	cpi	r24, 0x25	; 37
 394:	21 f4       	brne	.+8      	; 0x39e <vfprintf+0x7c>
 396:	b6 01       	movw	r22, r12
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	d6 d1       	rcall	.+940    	; 0x748 <fputc>
 39c:	e8 cf       	rjmp	.-48     	; 0x36e <vfprintf+0x4c>
 39e:	91 2c       	mov	r9, r1
 3a0:	21 2c       	mov	r2, r1
 3a2:	31 2c       	mov	r3, r1
 3a4:	ff e1       	ldi	r31, 0x1F	; 31
 3a6:	f3 15       	cp	r31, r3
 3a8:	d8 f0       	brcs	.+54     	; 0x3e0 <vfprintf+0xbe>
 3aa:	8b 32       	cpi	r24, 0x2B	; 43
 3ac:	79 f0       	breq	.+30     	; 0x3cc <vfprintf+0xaa>
 3ae:	38 f4       	brcc	.+14     	; 0x3be <vfprintf+0x9c>
 3b0:	80 32       	cpi	r24, 0x20	; 32
 3b2:	79 f0       	breq	.+30     	; 0x3d2 <vfprintf+0xb0>
 3b4:	83 32       	cpi	r24, 0x23	; 35
 3b6:	a1 f4       	brne	.+40     	; 0x3e0 <vfprintf+0xbe>
 3b8:	23 2d       	mov	r18, r3
 3ba:	20 61       	ori	r18, 0x10	; 16
 3bc:	1d c0       	rjmp	.+58     	; 0x3f8 <vfprintf+0xd6>
 3be:	8d 32       	cpi	r24, 0x2D	; 45
 3c0:	61 f0       	breq	.+24     	; 0x3da <vfprintf+0xb8>
 3c2:	80 33       	cpi	r24, 0x30	; 48
 3c4:	69 f4       	brne	.+26     	; 0x3e0 <vfprintf+0xbe>
 3c6:	23 2d       	mov	r18, r3
 3c8:	21 60       	ori	r18, 0x01	; 1
 3ca:	16 c0       	rjmp	.+44     	; 0x3f8 <vfprintf+0xd6>
 3cc:	83 2d       	mov	r24, r3
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	38 2e       	mov	r3, r24
 3d2:	e3 2d       	mov	r30, r3
 3d4:	e4 60       	ori	r30, 0x04	; 4
 3d6:	3e 2e       	mov	r3, r30
 3d8:	2a c0       	rjmp	.+84     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3da:	f3 2d       	mov	r31, r3
 3dc:	f8 60       	ori	r31, 0x08	; 8
 3de:	1d c0       	rjmp	.+58     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3e0:	37 fc       	sbrc	r3, 7
 3e2:	2d c0       	rjmp	.+90     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3e4:	20 ed       	ldi	r18, 0xD0	; 208
 3e6:	28 0f       	add	r18, r24
 3e8:	2a 30       	cpi	r18, 0x0A	; 10
 3ea:	40 f0       	brcs	.+16     	; 0x3fc <vfprintf+0xda>
 3ec:	8e 32       	cpi	r24, 0x2E	; 46
 3ee:	b9 f4       	brne	.+46     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f0:	36 fc       	sbrc	r3, 6
 3f2:	75 c1       	rjmp	.+746    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 3f4:	23 2d       	mov	r18, r3
 3f6:	20 64       	ori	r18, 0x40	; 64
 3f8:	32 2e       	mov	r3, r18
 3fa:	19 c0       	rjmp	.+50     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3fc:	36 fe       	sbrs	r3, 6
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 400:	8a e0       	ldi	r24, 0x0A	; 10
 402:	98 9e       	mul	r9, r24
 404:	20 0d       	add	r18, r0
 406:	11 24       	eor	r1, r1
 408:	92 2e       	mov	r9, r18
 40a:	11 c0       	rjmp	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 40c:	ea e0       	ldi	r30, 0x0A	; 10
 40e:	2e 9e       	mul	r2, r30
 410:	20 0d       	add	r18, r0
 412:	11 24       	eor	r1, r1
 414:	22 2e       	mov	r2, r18
 416:	f3 2d       	mov	r31, r3
 418:	f0 62       	ori	r31, 0x20	; 32
 41a:	3f 2e       	mov	r3, r31
 41c:	08 c0       	rjmp	.+16     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 41e:	8c 36       	cpi	r24, 0x6C	; 108
 420:	21 f4       	brne	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 422:	83 2d       	mov	r24, r3
 424:	80 68       	ori	r24, 0x80	; 128
 426:	38 2e       	mov	r3, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	88 36       	cpi	r24, 0x68	; 104
 42c:	41 f4       	brne	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 42e:	f7 01       	movw	r30, r14
 430:	93 fd       	sbrc	r25, 3
 432:	85 91       	lpm	r24, Z+
 434:	93 ff       	sbrs	r25, 3
 436:	81 91       	ld	r24, Z+
 438:	7f 01       	movw	r14, r30
 43a:	81 11       	cpse	r24, r1
 43c:	b3 cf       	rjmp	.-154    	; 0x3a4 <vfprintf+0x82>
 43e:	98 2f       	mov	r25, r24
 440:	9f 7d       	andi	r25, 0xDF	; 223
 442:	95 54       	subi	r25, 0x45	; 69
 444:	93 30       	cpi	r25, 0x03	; 3
 446:	28 f4       	brcc	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 448:	0c 5f       	subi	r16, 0xFC	; 252
 44a:	1f 4f       	sbci	r17, 0xFF	; 255
 44c:	9f e3       	ldi	r25, 0x3F	; 63
 44e:	99 83       	std	Y+1, r25	; 0x01
 450:	0d c0       	rjmp	.+26     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 452:	83 36       	cpi	r24, 0x63	; 99
 454:	31 f0       	breq	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 456:	83 37       	cpi	r24, 0x73	; 115
 458:	71 f0       	breq	.+28     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45a:	83 35       	cpi	r24, 0x53	; 83
 45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 45e:	55 c0       	rjmp	.+170    	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 460:	20 c0       	rjmp	.+64     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 462:	f8 01       	movw	r30, r16
 464:	80 81       	ld	r24, Z
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	0e 5f       	subi	r16, 0xFE	; 254
 46a:	1f 4f       	sbci	r17, 0xFF	; 255
 46c:	88 24       	eor	r8, r8
 46e:	83 94       	inc	r8
 470:	91 2c       	mov	r9, r1
 472:	53 01       	movw	r10, r6
 474:	12 c0       	rjmp	.+36     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 476:	28 01       	movw	r4, r16
 478:	f2 e0       	ldi	r31, 0x02	; 2
 47a:	4f 0e       	add	r4, r31
 47c:	51 1c       	adc	r5, r1
 47e:	f8 01       	movw	r30, r16
 480:	a0 80       	ld	r10, Z
 482:	b1 80       	ldd	r11, Z+1	; 0x01
 484:	36 fe       	sbrs	r3, 6
 486:	03 c0       	rjmp	.+6      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 488:	69 2d       	mov	r22, r9
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48e:	6f ef       	ldi	r22, 0xFF	; 255
 490:	7f ef       	ldi	r23, 0xFF	; 255
 492:	c5 01       	movw	r24, r10
 494:	4e d1       	rcall	.+668    	; 0x732 <strnlen>
 496:	4c 01       	movw	r8, r24
 498:	82 01       	movw	r16, r4
 49a:	f3 2d       	mov	r31, r3
 49c:	ff 77       	andi	r31, 0x7F	; 127
 49e:	3f 2e       	mov	r3, r31
 4a0:	15 c0       	rjmp	.+42     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4a2:	28 01       	movw	r4, r16
 4a4:	22 e0       	ldi	r18, 0x02	; 2
 4a6:	42 0e       	add	r4, r18
 4a8:	51 1c       	adc	r5, r1
 4aa:	f8 01       	movw	r30, r16
 4ac:	a0 80       	ld	r10, Z
 4ae:	b1 80       	ldd	r11, Z+1	; 0x01
 4b0:	36 fe       	sbrs	r3, 6
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b4:	69 2d       	mov	r22, r9
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4ba:	6f ef       	ldi	r22, 0xFF	; 255
 4bc:	7f ef       	ldi	r23, 0xFF	; 255
 4be:	c5 01       	movw	r24, r10
 4c0:	2d d1       	rcall	.+602    	; 0x71c <strnlen_P>
 4c2:	4c 01       	movw	r8, r24
 4c4:	f3 2d       	mov	r31, r3
 4c6:	f0 68       	ori	r31, 0x80	; 128
 4c8:	3f 2e       	mov	r3, r31
 4ca:	82 01       	movw	r16, r4
 4cc:	33 fc       	sbrc	r3, 3
 4ce:	19 c0       	rjmp	.+50     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4d0:	82 2d       	mov	r24, r2
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	88 16       	cp	r8, r24
 4d6:	99 06       	cpc	r9, r25
 4d8:	a0 f4       	brcc	.+40     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
 4da:	b6 01       	movw	r22, r12
 4dc:	80 e2       	ldi	r24, 0x20	; 32
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	33 d1       	rcall	.+614    	; 0x748 <fputc>
 4e2:	2a 94       	dec	r2
 4e4:	f5 cf       	rjmp	.-22     	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4e6:	f5 01       	movw	r30, r10
 4e8:	37 fc       	sbrc	r3, 7
 4ea:	85 91       	lpm	r24, Z+
 4ec:	37 fe       	sbrs	r3, 7
 4ee:	81 91       	ld	r24, Z+
 4f0:	5f 01       	movw	r10, r30
 4f2:	b6 01       	movw	r22, r12
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	28 d1       	rcall	.+592    	; 0x748 <fputc>
 4f8:	21 10       	cpse	r2, r1
 4fa:	2a 94       	dec	r2
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	82 1a       	sub	r8, r18
 500:	91 08       	sbc	r9, r1
 502:	81 14       	cp	r8, r1
 504:	91 04       	cpc	r9, r1
 506:	79 f7       	brne	.-34     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 508:	e1 c0       	rjmp	.+450    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 50a:	84 36       	cpi	r24, 0x64	; 100
 50c:	11 f0       	breq	.+4      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 50e:	89 36       	cpi	r24, 0x69	; 105
 510:	39 f5       	brne	.+78     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 512:	f8 01       	movw	r30, r16
 514:	37 fe       	sbrs	r3, 7
 516:	07 c0       	rjmp	.+14     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 518:	60 81       	ld	r22, Z
 51a:	71 81       	ldd	r23, Z+1	; 0x01
 51c:	82 81       	ldd	r24, Z+2	; 0x02
 51e:	93 81       	ldd	r25, Z+3	; 0x03
 520:	0c 5f       	subi	r16, 0xFC	; 252
 522:	1f 4f       	sbci	r17, 0xFF	; 255
 524:	08 c0       	rjmp	.+16     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 526:	60 81       	ld	r22, Z
 528:	71 81       	ldd	r23, Z+1	; 0x01
 52a:	07 2e       	mov	r0, r23
 52c:	00 0c       	add	r0, r0
 52e:	88 0b       	sbc	r24, r24
 530:	99 0b       	sbc	r25, r25
 532:	0e 5f       	subi	r16, 0xFE	; 254
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	f3 2d       	mov	r31, r3
 538:	ff 76       	andi	r31, 0x6F	; 111
 53a:	3f 2e       	mov	r3, r31
 53c:	97 ff       	sbrs	r25, 7
 53e:	09 c0       	rjmp	.+18     	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 540:	90 95       	com	r25
 542:	80 95       	com	r24
 544:	70 95       	com	r23
 546:	61 95       	neg	r22
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	f0 68       	ori	r31, 0x80	; 128
 550:	3f 2e       	mov	r3, r31
 552:	2a e0       	ldi	r18, 0x0A	; 10
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	a3 01       	movw	r20, r6
 558:	33 d1       	rcall	.+614    	; 0x7c0 <__ultoa_invert>
 55a:	88 2e       	mov	r8, r24
 55c:	86 18       	sub	r8, r6
 55e:	44 c0       	rjmp	.+136    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 560:	85 37       	cpi	r24, 0x75	; 117
 562:	31 f4       	brne	.+12     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 564:	23 2d       	mov	r18, r3
 566:	2f 7e       	andi	r18, 0xEF	; 239
 568:	b2 2e       	mov	r11, r18
 56a:	2a e0       	ldi	r18, 0x0A	; 10
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	25 c0       	rjmp	.+74     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 570:	93 2d       	mov	r25, r3
 572:	99 7f       	andi	r25, 0xF9	; 249
 574:	b9 2e       	mov	r11, r25
 576:	8f 36       	cpi	r24, 0x6F	; 111
 578:	c1 f0       	breq	.+48     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
 57a:	18 f4       	brcc	.+6      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
 57c:	88 35       	cpi	r24, 0x58	; 88
 57e:	79 f0       	breq	.+30     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 580:	ae c0       	rjmp	.+348    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 582:	80 37       	cpi	r24, 0x70	; 112
 584:	19 f0       	breq	.+6      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 586:	88 37       	cpi	r24, 0x78	; 120
 588:	21 f0       	breq	.+8      	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
 58a:	a9 c0       	rjmp	.+338    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
 58c:	e9 2f       	mov	r30, r25
 58e:	e0 61       	ori	r30, 0x10	; 16
 590:	be 2e       	mov	r11, r30
 592:	b4 fe       	sbrs	r11, 4
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 596:	fb 2d       	mov	r31, r11
 598:	f4 60       	ori	r31, 0x04	; 4
 59a:	bf 2e       	mov	r11, r31
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 59e:	34 fe       	sbrs	r3, 4
 5a0:	0a c0       	rjmp	.+20     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5a2:	29 2f       	mov	r18, r25
 5a4:	26 60       	ori	r18, 0x06	; 6
 5a6:	b2 2e       	mov	r11, r18
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5aa:	28 e0       	ldi	r18, 0x08	; 8
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b0:	20 e1       	ldi	r18, 0x10	; 16
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b6:	20 e1       	ldi	r18, 0x10	; 16
 5b8:	32 e0       	ldi	r19, 0x02	; 2
 5ba:	f8 01       	movw	r30, r16
 5bc:	b7 fe       	sbrs	r11, 7
 5be:	07 c0       	rjmp	.+14     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5c0:	60 81       	ld	r22, Z
 5c2:	71 81       	ldd	r23, Z+1	; 0x01
 5c4:	82 81       	ldd	r24, Z+2	; 0x02
 5c6:	93 81       	ldd	r25, Z+3	; 0x03
 5c8:	0c 5f       	subi	r16, 0xFC	; 252
 5ca:	1f 4f       	sbci	r17, 0xFF	; 255
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 5ce:	60 81       	ld	r22, Z
 5d0:	71 81       	ldd	r23, Z+1	; 0x01
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 5f       	subi	r16, 0xFE	; 254
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	a3 01       	movw	r20, r6
 5dc:	f1 d0       	rcall	.+482    	; 0x7c0 <__ultoa_invert>
 5de:	88 2e       	mov	r8, r24
 5e0:	86 18       	sub	r8, r6
 5e2:	fb 2d       	mov	r31, r11
 5e4:	ff 77       	andi	r31, 0x7F	; 127
 5e6:	3f 2e       	mov	r3, r31
 5e8:	36 fe       	sbrs	r3, 6
 5ea:	0d c0       	rjmp	.+26     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
 5ec:	23 2d       	mov	r18, r3
 5ee:	2e 7f       	andi	r18, 0xFE	; 254
 5f0:	a2 2e       	mov	r10, r18
 5f2:	89 14       	cp	r8, r9
 5f4:	58 f4       	brcc	.+22     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
 5f6:	34 fe       	sbrs	r3, 4
 5f8:	0b c0       	rjmp	.+22     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fa:	32 fc       	sbrc	r3, 2
 5fc:	09 c0       	rjmp	.+18     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 5fe:	83 2d       	mov	r24, r3
 600:	8e 7e       	andi	r24, 0xEE	; 238
 602:	a8 2e       	mov	r10, r24
 604:	05 c0       	rjmp	.+10     	; 0x610 <__LOCK_REGION_LENGTH__+0x210>
 606:	b8 2c       	mov	r11, r8
 608:	a3 2c       	mov	r10, r3
 60a:	03 c0       	rjmp	.+6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 60c:	b8 2c       	mov	r11, r8
 60e:	01 c0       	rjmp	.+2      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 610:	b9 2c       	mov	r11, r9
 612:	a4 fe       	sbrs	r10, 4
 614:	0f c0       	rjmp	.+30     	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 616:	fe 01       	movw	r30, r28
 618:	e8 0d       	add	r30, r8
 61a:	f1 1d       	adc	r31, r1
 61c:	80 81       	ld	r24, Z
 61e:	80 33       	cpi	r24, 0x30	; 48
 620:	21 f4       	brne	.+8      	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
 622:	9a 2d       	mov	r25, r10
 624:	99 7e       	andi	r25, 0xE9	; 233
 626:	a9 2e       	mov	r10, r25
 628:	09 c0       	rjmp	.+18     	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 62a:	a2 fe       	sbrs	r10, 2
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
 62e:	b3 94       	inc	r11
 630:	b3 94       	inc	r11
 632:	04 c0       	rjmp	.+8      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 634:	8a 2d       	mov	r24, r10
 636:	86 78       	andi	r24, 0x86	; 134
 638:	09 f0       	breq	.+2      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
 63a:	b3 94       	inc	r11
 63c:	a3 fc       	sbrc	r10, 3
 63e:	10 c0       	rjmp	.+32     	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 640:	a0 fe       	sbrs	r10, 0
 642:	06 c0       	rjmp	.+12     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 644:	b2 14       	cp	r11, r2
 646:	80 f4       	brcc	.+32     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
 648:	28 0c       	add	r2, r8
 64a:	92 2c       	mov	r9, r2
 64c:	9b 18       	sub	r9, r11
 64e:	0d c0       	rjmp	.+26     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 650:	b2 14       	cp	r11, r2
 652:	58 f4       	brcc	.+22     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 654:	b6 01       	movw	r22, r12
 656:	80 e2       	ldi	r24, 0x20	; 32
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	76 d0       	rcall	.+236    	; 0x748 <fputc>
 65c:	b3 94       	inc	r11
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
 660:	b2 14       	cp	r11, r2
 662:	18 f4       	brcc	.+6      	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 664:	2b 18       	sub	r2, r11
 666:	02 c0       	rjmp	.+4      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
 668:	98 2c       	mov	r9, r8
 66a:	21 2c       	mov	r2, r1
 66c:	a4 fe       	sbrs	r10, 4
 66e:	0f c0       	rjmp	.+30     	; 0x68e <__LOCK_REGION_LENGTH__+0x28e>
 670:	b6 01       	movw	r22, r12
 672:	80 e3       	ldi	r24, 0x30	; 48
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	68 d0       	rcall	.+208    	; 0x748 <fputc>
 678:	a2 fe       	sbrs	r10, 2
 67a:	16 c0       	rjmp	.+44     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 67c:	a1 fc       	sbrc	r10, 1
 67e:	03 c0       	rjmp	.+6      	; 0x686 <__LOCK_REGION_LENGTH__+0x286>
 680:	88 e7       	ldi	r24, 0x78	; 120
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
 686:	88 e5       	ldi	r24, 0x58	; 88
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	b6 01       	movw	r22, r12
 68c:	0c c0       	rjmp	.+24     	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
 68e:	8a 2d       	mov	r24, r10
 690:	86 78       	andi	r24, 0x86	; 134
 692:	51 f0       	breq	.+20     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 694:	a1 fe       	sbrs	r10, 1
 696:	02 c0       	rjmp	.+4      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
 698:	8b e2       	ldi	r24, 0x2B	; 43
 69a:	01 c0       	rjmp	.+2      	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 69c:	80 e2       	ldi	r24, 0x20	; 32
 69e:	a7 fc       	sbrc	r10, 7
 6a0:	8d e2       	ldi	r24, 0x2D	; 45
 6a2:	b6 01       	movw	r22, r12
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	50 d0       	rcall	.+160    	; 0x748 <fputc>
 6a8:	89 14       	cp	r8, r9
 6aa:	30 f4       	brcc	.+12     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6ac:	b6 01       	movw	r22, r12
 6ae:	80 e3       	ldi	r24, 0x30	; 48
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	4a d0       	rcall	.+148    	; 0x748 <fputc>
 6b4:	9a 94       	dec	r9
 6b6:	f8 cf       	rjmp	.-16     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
 6b8:	8a 94       	dec	r8
 6ba:	f3 01       	movw	r30, r6
 6bc:	e8 0d       	add	r30, r8
 6be:	f1 1d       	adc	r31, r1
 6c0:	80 81       	ld	r24, Z
 6c2:	b6 01       	movw	r22, r12
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	40 d0       	rcall	.+128    	; 0x748 <fputc>
 6c8:	81 10       	cpse	r8, r1
 6ca:	f6 cf       	rjmp	.-20     	; 0x6b8 <__LOCK_REGION_LENGTH__+0x2b8>
 6cc:	22 20       	and	r2, r2
 6ce:	09 f4       	brne	.+2      	; 0x6d2 <__LOCK_REGION_LENGTH__+0x2d2>
 6d0:	4e ce       	rjmp	.-868    	; 0x36e <vfprintf+0x4c>
 6d2:	b6 01       	movw	r22, r12
 6d4:	80 e2       	ldi	r24, 0x20	; 32
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	37 d0       	rcall	.+110    	; 0x748 <fputc>
 6da:	2a 94       	dec	r2
 6dc:	f7 cf       	rjmp	.-18     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
 6de:	f6 01       	movw	r30, r12
 6e0:	86 81       	ldd	r24, Z+6	; 0x06
 6e2:	97 81       	ldd	r25, Z+7	; 0x07
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__LOCK_REGION_LENGTH__+0x2ea>
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	9f ef       	ldi	r25, 0xFF	; 255
 6ea:	2b 96       	adiw	r28, 0x0b	; 11
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	df 90       	pop	r13
 704:	cf 90       	pop	r12
 706:	bf 90       	pop	r11
 708:	af 90       	pop	r10
 70a:	9f 90       	pop	r9
 70c:	8f 90       	pop	r8
 70e:	7f 90       	pop	r7
 710:	6f 90       	pop	r6
 712:	5f 90       	pop	r5
 714:	4f 90       	pop	r4
 716:	3f 90       	pop	r3
 718:	2f 90       	pop	r2
 71a:	08 95       	ret

0000071c <strnlen_P>:
 71c:	fc 01       	movw	r30, r24
 71e:	05 90       	lpm	r0, Z+
 720:	61 50       	subi	r22, 0x01	; 1
 722:	70 40       	sbci	r23, 0x00	; 0
 724:	01 10       	cpse	r0, r1
 726:	d8 f7       	brcc	.-10     	; 0x71e <strnlen_P+0x2>
 728:	80 95       	com	r24
 72a:	90 95       	com	r25
 72c:	8e 0f       	add	r24, r30
 72e:	9f 1f       	adc	r25, r31
 730:	08 95       	ret

00000732 <strnlen>:
 732:	fc 01       	movw	r30, r24
 734:	61 50       	subi	r22, 0x01	; 1
 736:	70 40       	sbci	r23, 0x00	; 0
 738:	01 90       	ld	r0, Z+
 73a:	01 10       	cpse	r0, r1
 73c:	d8 f7       	brcc	.-10     	; 0x734 <strnlen+0x2>
 73e:	80 95       	com	r24
 740:	90 95       	com	r25
 742:	8e 0f       	add	r24, r30
 744:	9f 1f       	adc	r25, r31
 746:	08 95       	ret

00000748 <fputc>:
 748:	0f 93       	push	r16
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	fb 01       	movw	r30, r22
 752:	23 81       	ldd	r18, Z+3	; 0x03
 754:	21 fd       	sbrc	r18, 1
 756:	03 c0       	rjmp	.+6      	; 0x75e <fputc+0x16>
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9f ef       	ldi	r25, 0xFF	; 255
 75c:	2c c0       	rjmp	.+88     	; 0x7b6 <fputc+0x6e>
 75e:	22 ff       	sbrs	r18, 2
 760:	16 c0       	rjmp	.+44     	; 0x78e <fputc+0x46>
 762:	46 81       	ldd	r20, Z+6	; 0x06
 764:	57 81       	ldd	r21, Z+7	; 0x07
 766:	24 81       	ldd	r18, Z+4	; 0x04
 768:	35 81       	ldd	r19, Z+5	; 0x05
 76a:	42 17       	cp	r20, r18
 76c:	53 07       	cpc	r21, r19
 76e:	44 f4       	brge	.+16     	; 0x780 <fputc+0x38>
 770:	a0 81       	ld	r26, Z
 772:	b1 81       	ldd	r27, Z+1	; 0x01
 774:	9d 01       	movw	r18, r26
 776:	2f 5f       	subi	r18, 0xFF	; 255
 778:	3f 4f       	sbci	r19, 0xFF	; 255
 77a:	31 83       	std	Z+1, r19	; 0x01
 77c:	20 83       	st	Z, r18
 77e:	8c 93       	st	X, r24
 780:	26 81       	ldd	r18, Z+6	; 0x06
 782:	37 81       	ldd	r19, Z+7	; 0x07
 784:	2f 5f       	subi	r18, 0xFF	; 255
 786:	3f 4f       	sbci	r19, 0xFF	; 255
 788:	37 83       	std	Z+7, r19	; 0x07
 78a:	26 83       	std	Z+6, r18	; 0x06
 78c:	14 c0       	rjmp	.+40     	; 0x7b6 <fputc+0x6e>
 78e:	8b 01       	movw	r16, r22
 790:	ec 01       	movw	r28, r24
 792:	fb 01       	movw	r30, r22
 794:	00 84       	ldd	r0, Z+8	; 0x08
 796:	f1 85       	ldd	r31, Z+9	; 0x09
 798:	e0 2d       	mov	r30, r0
 79a:	19 95       	eicall
 79c:	89 2b       	or	r24, r25
 79e:	e1 f6       	brne	.-72     	; 0x758 <fputc+0x10>
 7a0:	d8 01       	movw	r26, r16
 7a2:	16 96       	adiw	r26, 0x06	; 6
 7a4:	8d 91       	ld	r24, X+
 7a6:	9c 91       	ld	r25, X
 7a8:	17 97       	sbiw	r26, 0x07	; 7
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	17 96       	adiw	r26, 0x07	; 7
 7ae:	9c 93       	st	X, r25
 7b0:	8e 93       	st	-X, r24
 7b2:	16 97       	sbiw	r26, 0x06	; 6
 7b4:	ce 01       	movw	r24, r28
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	1f 91       	pop	r17
 7bc:	0f 91       	pop	r16
 7be:	08 95       	ret

000007c0 <__ultoa_invert>:
 7c0:	fa 01       	movw	r30, r20
 7c2:	aa 27       	eor	r26, r26
 7c4:	28 30       	cpi	r18, 0x08	; 8
 7c6:	51 f1       	breq	.+84     	; 0x81c <__ultoa_invert+0x5c>
 7c8:	20 31       	cpi	r18, 0x10	; 16
 7ca:	81 f1       	breq	.+96     	; 0x82c <__ultoa_invert+0x6c>
 7cc:	e8 94       	clt
 7ce:	6f 93       	push	r22
 7d0:	6e 7f       	andi	r22, 0xFE	; 254
 7d2:	6e 5f       	subi	r22, 0xFE	; 254
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	af 4f       	sbci	r26, 0xFF	; 255
 7dc:	b1 e0       	ldi	r27, 0x01	; 1
 7de:	3e d0       	rcall	.+124    	; 0x85c <__ultoa_invert+0x9c>
 7e0:	b4 e0       	ldi	r27, 0x04	; 4
 7e2:	3c d0       	rcall	.+120    	; 0x85c <__ultoa_invert+0x9c>
 7e4:	67 0f       	add	r22, r23
 7e6:	78 1f       	adc	r23, r24
 7e8:	89 1f       	adc	r24, r25
 7ea:	9a 1f       	adc	r25, r26
 7ec:	a1 1d       	adc	r26, r1
 7ee:	68 0f       	add	r22, r24
 7f0:	79 1f       	adc	r23, r25
 7f2:	8a 1f       	adc	r24, r26
 7f4:	91 1d       	adc	r25, r1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	6a 0f       	add	r22, r26
 7fa:	71 1d       	adc	r23, r1
 7fc:	81 1d       	adc	r24, r1
 7fe:	91 1d       	adc	r25, r1
 800:	a1 1d       	adc	r26, r1
 802:	20 d0       	rcall	.+64     	; 0x844 <__ultoa_invert+0x84>
 804:	09 f4       	brne	.+2      	; 0x808 <__ultoa_invert+0x48>
 806:	68 94       	set
 808:	3f 91       	pop	r19
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	26 9f       	mul	r18, r22
 80e:	11 24       	eor	r1, r1
 810:	30 19       	sub	r19, r0
 812:	30 5d       	subi	r19, 0xD0	; 208
 814:	31 93       	st	Z+, r19
 816:	de f6       	brtc	.-74     	; 0x7ce <__ultoa_invert+0xe>
 818:	cf 01       	movw	r24, r30
 81a:	08 95       	ret
 81c:	46 2f       	mov	r20, r22
 81e:	47 70       	andi	r20, 0x07	; 7
 820:	40 5d       	subi	r20, 0xD0	; 208
 822:	41 93       	st	Z+, r20
 824:	b3 e0       	ldi	r27, 0x03	; 3
 826:	0f d0       	rcall	.+30     	; 0x846 <__ultoa_invert+0x86>
 828:	c9 f7       	brne	.-14     	; 0x81c <__ultoa_invert+0x5c>
 82a:	f6 cf       	rjmp	.-20     	; 0x818 <__ultoa_invert+0x58>
 82c:	46 2f       	mov	r20, r22
 82e:	4f 70       	andi	r20, 0x0F	; 15
 830:	40 5d       	subi	r20, 0xD0	; 208
 832:	4a 33       	cpi	r20, 0x3A	; 58
 834:	18 f0       	brcs	.+6      	; 0x83c <__ultoa_invert+0x7c>
 836:	49 5d       	subi	r20, 0xD9	; 217
 838:	31 fd       	sbrc	r19, 1
 83a:	40 52       	subi	r20, 0x20	; 32
 83c:	41 93       	st	Z+, r20
 83e:	02 d0       	rcall	.+4      	; 0x844 <__ultoa_invert+0x84>
 840:	a9 f7       	brne	.-22     	; 0x82c <__ultoa_invert+0x6c>
 842:	ea cf       	rjmp	.-44     	; 0x818 <__ultoa_invert+0x58>
 844:	b4 e0       	ldi	r27, 0x04	; 4
 846:	a6 95       	lsr	r26
 848:	97 95       	ror	r25
 84a:	87 95       	ror	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	ba 95       	dec	r27
 852:	c9 f7       	brne	.-14     	; 0x846 <__ultoa_invert+0x86>
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	61 05       	cpc	r22, r1
 858:	71 05       	cpc	r23, r1
 85a:	08 95       	ret
 85c:	9b 01       	movw	r18, r22
 85e:	ac 01       	movw	r20, r24
 860:	0a 2e       	mov	r0, r26
 862:	06 94       	lsr	r0
 864:	57 95       	ror	r21
 866:	47 95       	ror	r20
 868:	37 95       	ror	r19
 86a:	27 95       	ror	r18
 86c:	ba 95       	dec	r27
 86e:	c9 f7       	brne	.-14     	; 0x862 <__ultoa_invert+0xa2>
 870:	62 0f       	add	r22, r18
 872:	73 1f       	adc	r23, r19
 874:	84 1f       	adc	r24, r20
 876:	95 1f       	adc	r25, r21
 878:	a0 1d       	adc	r26, r0
 87a:	08 95       	ret

0000087c <_exit>:
 87c:	f8 94       	cli

0000087e <__stop_program>:
 87e:	ff cf       	rjmp	.-2      	; 0x87e <__stop_program>
