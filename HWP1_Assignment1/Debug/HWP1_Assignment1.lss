
HWP1_Assignment1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800200  000007b0  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080027a  0080027a  000008be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000008be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f62  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d66  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005bf  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d9  00000000  00000000  00002d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031f  00000000  00000000  0000331d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 eb       	ldi	r30, 0xB0	; 176
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 37       	cpi	r26, 0x7A	; 122
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e7       	ldi	r26, 0x7A	; 122
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 38       	cpi	r26, 0x80	; 128
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7e d0       	rcall	.+252    	; 0x21c <main>
 120:	45 c3       	rjmp	.+1674   	; 0x7ac <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <init_keys>:
#include <avr/io.h>
#include <stdio.h>
#include "buttons.h"

void init_keys() {
	DDRC &= ~(0x3F); //0bxx000000
 124:	87 b1       	in	r24, 0x07	; 7
 126:	80 7c       	andi	r24, 0xC0	; 192
 128:	87 b9       	out	0x07, r24	; 7
    DDRD &= ~(0x0C); //0bxxxx00xx  
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	83 7f       	andi	r24, 0xF3	; 243
 12e:	8a b9       	out	0x0a, r24	; 10
	PORTC |= 0x3F;
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8f 63       	ori	r24, 0x3F	; 63
 134:	88 b9       	out	0x08, r24	; 8
    PORTD |= 0x0C;
 136:	8b b1       	in	r24, 0x0b	; 11
 138:	8c 60       	ori	r24, 0x0C	; 12
 13a:	8b b9       	out	0x0b, r24	; 11
 13c:	08 95       	ret

0000013e <get_key>:
}

int8_t get_key(uint8_t key_no) {
	if (key_no > 8 || key_no < 1) {
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	48 f0       	brcs	.+18     	; 0x156 <get_key+0x18>
		printf("Incorrect button number entered.");
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	92 e0       	ldi	r25, 0x02	; 2
 148:	9f 93       	push	r25
 14a:	8f 93       	push	r24
 14c:	6f d0       	rcall	.+222    	; 0x22c <printf>
		return ERROR;
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	08 95       	ret

    key_no -= 1;
    uint8_t mask; // Mask for checking the pin status

    // Determine the mask and the port based on the button number
    if (key_no < 6) { // For PC0 to PC5 (button0 to button5)
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	70 f4       	brcc	.+28     	; 0x176 <get_key+0x38>
        mask = 1 << key_no;
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	a9 01       	movw	r20, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <get_key+0x28>
 162:	44 0f       	add	r20, r20
 164:	55 1f       	adc	r21, r21
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <get_key+0x24>
 16a:	ca 01       	movw	r24, r20
        if ((PINC & mask) == 0) {
 16c:	96 b1       	in	r25, 0x06	; 6
 16e:	89 23       	and	r24, r25
 170:	91 f0       	breq	.+36     	; 0x196 <get_key+0x58>
        if ((PIND & mask) == 0) {
            return ON;
        }
    }

    return OFF;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
        if ((PINC & mask) == 0) {
            return ON;
        }
    }
    else { // For PD2 to PD3 (button6 to button7)
        mask = 1 << (key_no - 6 + 2); // key_no - 6 gives 0 for button6 and 1 for button7, +2 adjusts for PD2, PD3
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	04 97       	sbiw	r24, 0x04	; 4
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	a9 01       	movw	r20, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <get_key+0x48>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <get_key+0x44>
 18a:	ca 01       	movw	r24, r20
        if ((PIND & mask) == 0) {
 18c:	99 b1       	in	r25, 0x09	; 9
 18e:	89 23       	and	r24, r25
 190:	21 f0       	breq	.+8      	; 0x19a <get_key+0x5c>
            return ON;
        }
    }

    return OFF;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret

    // Determine the mask and the port based on the button number
    if (key_no < 6) { // For PC0 to PC5 (button0 to button5)
        mask = 1 << key_no;
        if ((PINC & mask) == 0) {
            return ON;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	08 95       	ret
        }
    }
    else { // For PD2 to PD3 (button6 to button7)
        mask = 1 << (key_no - 6 + 2); // key_no - 6 gives 0 for button6 and 1 for button7, +2 adjusts for PD2, PD3
        if ((PIND & mask) == 0) {
            return ON;
 19a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }

    return OFF;
}
 19c:	08 95       	ret

0000019e <scan_key>:

// Return the number of the first pressed button [1...8], 0 if no key is pushed
uint8_t scan_key() {
 19e:	cf 93       	push	r28
    for (uint8_t i = 1; i <= 8; i++) {
 1a0:	c1 e0       	ldi	r28, 0x01	; 1
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <scan_key+0x10>
        if (get_key(i) == ON) {
 1a4:	8c 2f       	mov	r24, r28
 1a6:	cb df       	rcall	.-106    	; 0x13e <get_key>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	29 f0       	breq	.+10     	; 0x1b6 <scan_key+0x18>
    return OFF;
}

// Return the number of the first pressed button [1...8], 0 if no key is pushed
uint8_t scan_key() {
    for (uint8_t i = 1; i <= 8; i++) {
 1ac:	cf 5f       	subi	r28, 0xFF	; 255
 1ae:	c9 30       	cpi	r28, 0x09	; 9
 1b0:	c8 f3       	brcs	.-14     	; 0x1a4 <scan_key+0x6>
        if (get_key(i) == ON) {
            return i; // Return the number of the pressed button
        }
    }
    return 0; // Return 0 if no button is pressed
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <scan_key+0x1a>

// Return the number of the first pressed button [1...8], 0 if no key is pushed
uint8_t scan_key() {
    for (uint8_t i = 1; i <= 8; i++) {
        if (get_key(i) == ON) {
            return i; // Return the number of the pressed button
 1b6:	8c 2f       	mov	r24, r28
        }
    }
    return 0; // Return 0 if no button is pressed
}
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <init_leds>:
	}
	else {
		PORTA &= ~_BV(led_no);
		return SUCCESS;
	}
}
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	81 b9       	out	0x01, r24	; 1
 1c0:	82 b9       	out	0x02, r24	; 2
 1c2:	08 95       	ret

000001c4 <lightbar>:

int8_t lightbar(uint8_t level) {
	// reg val for debug
	//uint8_t reg = (uint8_t)PORTA;
	if (level < 0 || level > 8) {
 1c4:	89 30       	cpi	r24, 0x09	; 9
 1c6:	48 f0       	brcs	.+18     	; 0x1da <lightbar+0x16>
		printf("Incorrect lightbar level entered.");
 1c8:	88 e5       	ldi	r24, 0x58	; 88
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	9f 93       	push	r25
 1ce:	8f 93       	push	r24
 1d0:	2d d0       	rcall	.+90     	; 0x22c <printf>
		return ERROR;
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	08 95       	ret
	}
	if (level == 0) {
 1da:	81 11       	cpse	r24, r1
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <lightbar+0x22>
		PORTA = 0xFF;
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	82 b9       	out	0x02, r24	; 2
		return SUCCESS;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	08 95       	ret
	}
	level -= 1;
 1e6:	81 50       	subi	r24, 0x01	; 1
	PORTA = 0xFF;
 1e8:	9f ef       	ldi	r25, 0xFF	; 255
 1ea:	92 b9       	out	0x02, r25	; 2
	for (int i = 0; i <= level; i++) {
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	0e c0       	rjmp	.+28     	; 0x20e <lightbar+0x4a>
		PORTA &= ~(1 << i);
 1f2:	92 b1       	in	r25, 0x02	; 2
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	04 2e       	mov	r0, r20
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <lightbar+0x3c>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <lightbar+0x38>
 204:	20 95       	com	r18
 206:	29 23       	and	r18, r25
 208:	22 b9       	out	0x02, r18	; 2
		PORTA = 0xFF;
		return SUCCESS;
	}
	level -= 1;
	PORTA = 0xFF;
	for (int i = 0; i <= level; i++) {
 20a:	4f 5f       	subi	r20, 0xFF	; 255
 20c:	5f 4f       	sbci	r21, 0xFF	; 255
 20e:	28 2f       	mov	r18, r24
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	24 17       	cp	r18, r20
 214:	35 07       	cpc	r19, r21
 216:	6c f7       	brge	.-38     	; 0x1f2 <lightbar+0x2e>
		PORTA &= ~(1 << i);
	}
	return SUCCESS;
 218:	82 e0       	ldi	r24, 0x02	; 2
}
 21a:	08 95       	ret

0000021c <main>:
#include "led_array.h"
#include "buttons.h"

int main(void)
{ 
	init_leds();
 21c:	cf df       	rcall	.-98     	; 0x1bc <init_leds>
	init_keys();
 21e:	82 df       	rcall	.-252    	; 0x124 <init_keys>
	uint8_t last_state[6] = {0}; // Stores the last state to minimize unnecessary writes

	while (1) 
    {
		uint8_t old_key_val = 0;
		uint8_t new_key_val = scan_key();
 220:	be df       	rcall	.-132    	; 0x19e <scan_key>
 222:	88 23       	and	r24, r24
		if (!(new_key_val == 0 || new_key_val == old_key_val)){
 224:	e9 f3       	breq	.-6      	; 0x220 <main+0x4>
 226:	e1 f3       	breq	.-8      	; 0x220 <main+0x4>
			lightbar(new_key_val);
 228:	cd df       	rcall	.-102    	; 0x1c4 <lightbar>
 22a:	fa cf       	rjmp	.-12     	; 0x220 <main+0x4>

0000022c <printf>:
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
 234:	ae 01       	movw	r20, r28
 236:	4a 5f       	subi	r20, 0xFA	; 250
 238:	5f 4f       	sbci	r21, 0xFF	; 255
 23a:	fa 01       	movw	r30, r20
 23c:	61 91       	ld	r22, Z+
 23e:	71 91       	ld	r23, Z+
 240:	af 01       	movw	r20, r30
 242:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <__data_end+0x2>
 246:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <__data_end+0x3>
 24a:	03 d0       	rcall	.+6      	; 0x252 <vfprintf>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <vfprintf>:
 252:	2f 92       	push	r2
 254:	3f 92       	push	r3
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	2b 97       	sbiw	r28, 0x0b	; 11
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	6c 01       	movw	r12, r24
 288:	7b 01       	movw	r14, r22
 28a:	8a 01       	movw	r16, r20
 28c:	fc 01       	movw	r30, r24
 28e:	17 82       	std	Z+7, r1	; 0x07
 290:	16 82       	std	Z+6, r1	; 0x06
 292:	83 81       	ldd	r24, Z+3	; 0x03
 294:	81 ff       	sbrs	r24, 1
 296:	bf c1       	rjmp	.+894    	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	3c 01       	movw	r6, r24
 29e:	f6 01       	movw	r30, r12
 2a0:	93 81       	ldd	r25, Z+3	; 0x03
 2a2:	f7 01       	movw	r30, r14
 2a4:	93 fd       	sbrc	r25, 3
 2a6:	85 91       	lpm	r24, Z+
 2a8:	93 ff       	sbrs	r25, 3
 2aa:	81 91       	ld	r24, Z+
 2ac:	7f 01       	movw	r14, r30
 2ae:	88 23       	and	r24, r24
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <vfprintf+0x62>
 2b2:	ad c1       	rjmp	.+858    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 2b4:	85 32       	cpi	r24, 0x25	; 37
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <vfprintf+0x74>
 2b8:	93 fd       	sbrc	r25, 3
 2ba:	85 91       	lpm	r24, Z+
 2bc:	93 ff       	sbrs	r25, 3
 2be:	81 91       	ld	r24, Z+
 2c0:	7f 01       	movw	r14, r30
 2c2:	85 32       	cpi	r24, 0x25	; 37
 2c4:	21 f4       	brne	.+8      	; 0x2ce <vfprintf+0x7c>
 2c6:	b6 01       	movw	r22, r12
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	d6 d1       	rcall	.+940    	; 0x678 <fputc>
 2cc:	e8 cf       	rjmp	.-48     	; 0x29e <vfprintf+0x4c>
 2ce:	91 2c       	mov	r9, r1
 2d0:	21 2c       	mov	r2, r1
 2d2:	31 2c       	mov	r3, r1
 2d4:	ff e1       	ldi	r31, 0x1F	; 31
 2d6:	f3 15       	cp	r31, r3
 2d8:	d8 f0       	brcs	.+54     	; 0x310 <vfprintf+0xbe>
 2da:	8b 32       	cpi	r24, 0x2B	; 43
 2dc:	79 f0       	breq	.+30     	; 0x2fc <vfprintf+0xaa>
 2de:	38 f4       	brcc	.+14     	; 0x2ee <vfprintf+0x9c>
 2e0:	80 32       	cpi	r24, 0x20	; 32
 2e2:	79 f0       	breq	.+30     	; 0x302 <vfprintf+0xb0>
 2e4:	83 32       	cpi	r24, 0x23	; 35
 2e6:	a1 f4       	brne	.+40     	; 0x310 <vfprintf+0xbe>
 2e8:	23 2d       	mov	r18, r3
 2ea:	20 61       	ori	r18, 0x10	; 16
 2ec:	1d c0       	rjmp	.+58     	; 0x328 <vfprintf+0xd6>
 2ee:	8d 32       	cpi	r24, 0x2D	; 45
 2f0:	61 f0       	breq	.+24     	; 0x30a <vfprintf+0xb8>
 2f2:	80 33       	cpi	r24, 0x30	; 48
 2f4:	69 f4       	brne	.+26     	; 0x310 <vfprintf+0xbe>
 2f6:	23 2d       	mov	r18, r3
 2f8:	21 60       	ori	r18, 0x01	; 1
 2fa:	16 c0       	rjmp	.+44     	; 0x328 <vfprintf+0xd6>
 2fc:	83 2d       	mov	r24, r3
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	38 2e       	mov	r3, r24
 302:	e3 2d       	mov	r30, r3
 304:	e4 60       	ori	r30, 0x04	; 4
 306:	3e 2e       	mov	r3, r30
 308:	2a c0       	rjmp	.+84     	; 0x35e <vfprintf+0x10c>
 30a:	f3 2d       	mov	r31, r3
 30c:	f8 60       	ori	r31, 0x08	; 8
 30e:	1d c0       	rjmp	.+58     	; 0x34a <vfprintf+0xf8>
 310:	37 fc       	sbrc	r3, 7
 312:	2d c0       	rjmp	.+90     	; 0x36e <vfprintf+0x11c>
 314:	20 ed       	ldi	r18, 0xD0	; 208
 316:	28 0f       	add	r18, r24
 318:	2a 30       	cpi	r18, 0x0A	; 10
 31a:	40 f0       	brcs	.+16     	; 0x32c <vfprintf+0xda>
 31c:	8e 32       	cpi	r24, 0x2E	; 46
 31e:	b9 f4       	brne	.+46     	; 0x34e <vfprintf+0xfc>
 320:	36 fc       	sbrc	r3, 6
 322:	75 c1       	rjmp	.+746    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 324:	23 2d       	mov	r18, r3
 326:	20 64       	ori	r18, 0x40	; 64
 328:	32 2e       	mov	r3, r18
 32a:	19 c0       	rjmp	.+50     	; 0x35e <vfprintf+0x10c>
 32c:	36 fe       	sbrs	r3, 6
 32e:	06 c0       	rjmp	.+12     	; 0x33c <vfprintf+0xea>
 330:	8a e0       	ldi	r24, 0x0A	; 10
 332:	98 9e       	mul	r9, r24
 334:	20 0d       	add	r18, r0
 336:	11 24       	eor	r1, r1
 338:	92 2e       	mov	r9, r18
 33a:	11 c0       	rjmp	.+34     	; 0x35e <vfprintf+0x10c>
 33c:	ea e0       	ldi	r30, 0x0A	; 10
 33e:	2e 9e       	mul	r2, r30
 340:	20 0d       	add	r18, r0
 342:	11 24       	eor	r1, r1
 344:	22 2e       	mov	r2, r18
 346:	f3 2d       	mov	r31, r3
 348:	f0 62       	ori	r31, 0x20	; 32
 34a:	3f 2e       	mov	r3, r31
 34c:	08 c0       	rjmp	.+16     	; 0x35e <vfprintf+0x10c>
 34e:	8c 36       	cpi	r24, 0x6C	; 108
 350:	21 f4       	brne	.+8      	; 0x35a <vfprintf+0x108>
 352:	83 2d       	mov	r24, r3
 354:	80 68       	ori	r24, 0x80	; 128
 356:	38 2e       	mov	r3, r24
 358:	02 c0       	rjmp	.+4      	; 0x35e <vfprintf+0x10c>
 35a:	88 36       	cpi	r24, 0x68	; 104
 35c:	41 f4       	brne	.+16     	; 0x36e <vfprintf+0x11c>
 35e:	f7 01       	movw	r30, r14
 360:	93 fd       	sbrc	r25, 3
 362:	85 91       	lpm	r24, Z+
 364:	93 ff       	sbrs	r25, 3
 366:	81 91       	ld	r24, Z+
 368:	7f 01       	movw	r14, r30
 36a:	81 11       	cpse	r24, r1
 36c:	b3 cf       	rjmp	.-154    	; 0x2d4 <vfprintf+0x82>
 36e:	98 2f       	mov	r25, r24
 370:	9f 7d       	andi	r25, 0xDF	; 223
 372:	95 54       	subi	r25, 0x45	; 69
 374:	93 30       	cpi	r25, 0x03	; 3
 376:	28 f4       	brcc	.+10     	; 0x382 <vfprintf+0x130>
 378:	0c 5f       	subi	r16, 0xFC	; 252
 37a:	1f 4f       	sbci	r17, 0xFF	; 255
 37c:	9f e3       	ldi	r25, 0x3F	; 63
 37e:	99 83       	std	Y+1, r25	; 0x01
 380:	0d c0       	rjmp	.+26     	; 0x39c <vfprintf+0x14a>
 382:	83 36       	cpi	r24, 0x63	; 99
 384:	31 f0       	breq	.+12     	; 0x392 <vfprintf+0x140>
 386:	83 37       	cpi	r24, 0x73	; 115
 388:	71 f0       	breq	.+28     	; 0x3a6 <vfprintf+0x154>
 38a:	83 35       	cpi	r24, 0x53	; 83
 38c:	09 f0       	breq	.+2      	; 0x390 <vfprintf+0x13e>
 38e:	55 c0       	rjmp	.+170    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 390:	20 c0       	rjmp	.+64     	; 0x3d2 <vfprintf+0x180>
 392:	f8 01       	movw	r30, r16
 394:	80 81       	ld	r24, Z
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	0e 5f       	subi	r16, 0xFE	; 254
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	88 24       	eor	r8, r8
 39e:	83 94       	inc	r8
 3a0:	91 2c       	mov	r9, r1
 3a2:	53 01       	movw	r10, r6
 3a4:	12 c0       	rjmp	.+36     	; 0x3ca <vfprintf+0x178>
 3a6:	28 01       	movw	r4, r16
 3a8:	f2 e0       	ldi	r31, 0x02	; 2
 3aa:	4f 0e       	add	r4, r31
 3ac:	51 1c       	adc	r5, r1
 3ae:	f8 01       	movw	r30, r16
 3b0:	a0 80       	ld	r10, Z
 3b2:	b1 80       	ldd	r11, Z+1	; 0x01
 3b4:	36 fe       	sbrs	r3, 6
 3b6:	03 c0       	rjmp	.+6      	; 0x3be <vfprintf+0x16c>
 3b8:	69 2d       	mov	r22, r9
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <vfprintf+0x170>
 3be:	6f ef       	ldi	r22, 0xFF	; 255
 3c0:	7f ef       	ldi	r23, 0xFF	; 255
 3c2:	c5 01       	movw	r24, r10
 3c4:	4e d1       	rcall	.+668    	; 0x662 <strnlen>
 3c6:	4c 01       	movw	r8, r24
 3c8:	82 01       	movw	r16, r4
 3ca:	f3 2d       	mov	r31, r3
 3cc:	ff 77       	andi	r31, 0x7F	; 127
 3ce:	3f 2e       	mov	r3, r31
 3d0:	15 c0       	rjmp	.+42     	; 0x3fc <vfprintf+0x1aa>
 3d2:	28 01       	movw	r4, r16
 3d4:	22 e0       	ldi	r18, 0x02	; 2
 3d6:	42 0e       	add	r4, r18
 3d8:	51 1c       	adc	r5, r1
 3da:	f8 01       	movw	r30, r16
 3dc:	a0 80       	ld	r10, Z
 3de:	b1 80       	ldd	r11, Z+1	; 0x01
 3e0:	36 fe       	sbrs	r3, 6
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <vfprintf+0x198>
 3e4:	69 2d       	mov	r22, r9
 3e6:	70 e0       	ldi	r23, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <vfprintf+0x19c>
 3ea:	6f ef       	ldi	r22, 0xFF	; 255
 3ec:	7f ef       	ldi	r23, 0xFF	; 255
 3ee:	c5 01       	movw	r24, r10
 3f0:	2d d1       	rcall	.+602    	; 0x64c <strnlen_P>
 3f2:	4c 01       	movw	r8, r24
 3f4:	f3 2d       	mov	r31, r3
 3f6:	f0 68       	ori	r31, 0x80	; 128
 3f8:	3f 2e       	mov	r3, r31
 3fa:	82 01       	movw	r16, r4
 3fc:	33 fc       	sbrc	r3, 3
 3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 400:	82 2d       	mov	r24, r2
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	88 16       	cp	r8, r24
 406:	99 06       	cpc	r9, r25
 408:	a0 f4       	brcc	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40a:	b6 01       	movw	r22, r12
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	33 d1       	rcall	.+614    	; 0x678 <fputc>
 412:	2a 94       	dec	r2
 414:	f5 cf       	rjmp	.-22     	; 0x400 <__LOCK_REGION_LENGTH__>
 416:	f5 01       	movw	r30, r10
 418:	37 fc       	sbrc	r3, 7
 41a:	85 91       	lpm	r24, Z+
 41c:	37 fe       	sbrs	r3, 7
 41e:	81 91       	ld	r24, Z+
 420:	5f 01       	movw	r10, r30
 422:	b6 01       	movw	r22, r12
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	28 d1       	rcall	.+592    	; 0x678 <fputc>
 428:	21 10       	cpse	r2, r1
 42a:	2a 94       	dec	r2
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	82 1a       	sub	r8, r18
 430:	91 08       	sbc	r9, r1
 432:	81 14       	cp	r8, r1
 434:	91 04       	cpc	r9, r1
 436:	79 f7       	brne	.-34     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 438:	e1 c0       	rjmp	.+450    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 43a:	84 36       	cpi	r24, 0x64	; 100
 43c:	11 f0       	breq	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	89 36       	cpi	r24, 0x69	; 105
 440:	39 f5       	brne	.+78     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 442:	f8 01       	movw	r30, r16
 444:	37 fe       	sbrs	r3, 7
 446:	07 c0       	rjmp	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 448:	60 81       	ld	r22, Z
 44a:	71 81       	ldd	r23, Z+1	; 0x01
 44c:	82 81       	ldd	r24, Z+2	; 0x02
 44e:	93 81       	ldd	r25, Z+3	; 0x03
 450:	0c 5f       	subi	r16, 0xFC	; 252
 452:	1f 4f       	sbci	r17, 0xFF	; 255
 454:	08 c0       	rjmp	.+16     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 456:	60 81       	ld	r22, Z
 458:	71 81       	ldd	r23, Z+1	; 0x01
 45a:	07 2e       	mov	r0, r23
 45c:	00 0c       	add	r0, r0
 45e:	88 0b       	sbc	r24, r24
 460:	99 0b       	sbc	r25, r25
 462:	0e 5f       	subi	r16, 0xFE	; 254
 464:	1f 4f       	sbci	r17, 0xFF	; 255
 466:	f3 2d       	mov	r31, r3
 468:	ff 76       	andi	r31, 0x6F	; 111
 46a:	3f 2e       	mov	r3, r31
 46c:	97 ff       	sbrs	r25, 7
 46e:	09 c0       	rjmp	.+18     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 470:	90 95       	com	r25
 472:	80 95       	com	r24
 474:	70 95       	com	r23
 476:	61 95       	neg	r22
 478:	7f 4f       	sbci	r23, 0xFF	; 255
 47a:	8f 4f       	sbci	r24, 0xFF	; 255
 47c:	9f 4f       	sbci	r25, 0xFF	; 255
 47e:	f0 68       	ori	r31, 0x80	; 128
 480:	3f 2e       	mov	r3, r31
 482:	2a e0       	ldi	r18, 0x0A	; 10
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	a3 01       	movw	r20, r6
 488:	33 d1       	rcall	.+614    	; 0x6f0 <__ultoa_invert>
 48a:	88 2e       	mov	r8, r24
 48c:	86 18       	sub	r8, r6
 48e:	44 c0       	rjmp	.+136    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 490:	85 37       	cpi	r24, 0x75	; 117
 492:	31 f4       	brne	.+12     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 494:	23 2d       	mov	r18, r3
 496:	2f 7e       	andi	r18, 0xEF	; 239
 498:	b2 2e       	mov	r11, r18
 49a:	2a e0       	ldi	r18, 0x0A	; 10
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	25 c0       	rjmp	.+74     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4a0:	93 2d       	mov	r25, r3
 4a2:	99 7f       	andi	r25, 0xF9	; 249
 4a4:	b9 2e       	mov	r11, r25
 4a6:	8f 36       	cpi	r24, 0x6F	; 111
 4a8:	c1 f0       	breq	.+48     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 4aa:	18 f4       	brcc	.+6      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4ac:	88 35       	cpi	r24, 0x58	; 88
 4ae:	79 f0       	breq	.+30     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4b0:	ae c0       	rjmp	.+348    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 4b2:	80 37       	cpi	r24, 0x70	; 112
 4b4:	19 f0       	breq	.+6      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4b6:	88 37       	cpi	r24, 0x78	; 120
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ba:	a9 c0       	rjmp	.+338    	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 4bc:	e9 2f       	mov	r30, r25
 4be:	e0 61       	ori	r30, 0x10	; 16
 4c0:	be 2e       	mov	r11, r30
 4c2:	b4 fe       	sbrs	r11, 4
 4c4:	0d c0       	rjmp	.+26     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4c6:	fb 2d       	mov	r31, r11
 4c8:	f4 60       	ori	r31, 0x04	; 4
 4ca:	bf 2e       	mov	r11, r31
 4cc:	09 c0       	rjmp	.+18     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4ce:	34 fe       	sbrs	r3, 4
 4d0:	0a c0       	rjmp	.+20     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4d2:	29 2f       	mov	r18, r25
 4d4:	26 60       	ori	r18, 0x06	; 6
 4d6:	b2 2e       	mov	r11, r18
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4da:	28 e0       	ldi	r18, 0x08	; 8
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	05 c0       	rjmp	.+10     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e0:	20 e1       	ldi	r18, 0x10	; 16
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4e6:	20 e1       	ldi	r18, 0x10	; 16
 4e8:	32 e0       	ldi	r19, 0x02	; 2
 4ea:	f8 01       	movw	r30, r16
 4ec:	b7 fe       	sbrs	r11, 7
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4f0:	60 81       	ld	r22, Z
 4f2:	71 81       	ldd	r23, Z+1	; 0x01
 4f4:	82 81       	ldd	r24, Z+2	; 0x02
 4f6:	93 81       	ldd	r25, Z+3	; 0x03
 4f8:	0c 5f       	subi	r16, 0xFC	; 252
 4fa:	1f 4f       	sbci	r17, 0xFF	; 255
 4fc:	06 c0       	rjmp	.+12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
 4fe:	60 81       	ld	r22, Z
 500:	71 81       	ldd	r23, Z+1	; 0x01
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 5f       	subi	r16, 0xFE	; 254
 508:	1f 4f       	sbci	r17, 0xFF	; 255
 50a:	a3 01       	movw	r20, r6
 50c:	f1 d0       	rcall	.+482    	; 0x6f0 <__ultoa_invert>
 50e:	88 2e       	mov	r8, r24
 510:	86 18       	sub	r8, r6
 512:	fb 2d       	mov	r31, r11
 514:	ff 77       	andi	r31, 0x7F	; 127
 516:	3f 2e       	mov	r3, r31
 518:	36 fe       	sbrs	r3, 6
 51a:	0d c0       	rjmp	.+26     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 51c:	23 2d       	mov	r18, r3
 51e:	2e 7f       	andi	r18, 0xFE	; 254
 520:	a2 2e       	mov	r10, r18
 522:	89 14       	cp	r8, r9
 524:	58 f4       	brcc	.+22     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 526:	34 fe       	sbrs	r3, 4
 528:	0b c0       	rjmp	.+22     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 52a:	32 fc       	sbrc	r3, 2
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 52e:	83 2d       	mov	r24, r3
 530:	8e 7e       	andi	r24, 0xEE	; 238
 532:	a8 2e       	mov	r10, r24
 534:	05 c0       	rjmp	.+10     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
 536:	b8 2c       	mov	r11, r8
 538:	a3 2c       	mov	r10, r3
 53a:	03 c0       	rjmp	.+6      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 53c:	b8 2c       	mov	r11, r8
 53e:	01 c0       	rjmp	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	b9 2c       	mov	r11, r9
 542:	a4 fe       	sbrs	r10, 4
 544:	0f c0       	rjmp	.+30     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 546:	fe 01       	movw	r30, r28
 548:	e8 0d       	add	r30, r8
 54a:	f1 1d       	adc	r31, r1
 54c:	80 81       	ld	r24, Z
 54e:	80 33       	cpi	r24, 0x30	; 48
 550:	21 f4       	brne	.+8      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 552:	9a 2d       	mov	r25, r10
 554:	99 7e       	andi	r25, 0xE9	; 233
 556:	a9 2e       	mov	r10, r25
 558:	09 c0       	rjmp	.+18     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 55a:	a2 fe       	sbrs	r10, 2
 55c:	06 c0       	rjmp	.+12     	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 55e:	b3 94       	inc	r11
 560:	b3 94       	inc	r11
 562:	04 c0       	rjmp	.+8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 564:	8a 2d       	mov	r24, r10
 566:	86 78       	andi	r24, 0x86	; 134
 568:	09 f0       	breq	.+2      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 56a:	b3 94       	inc	r11
 56c:	a3 fc       	sbrc	r10, 3
 56e:	10 c0       	rjmp	.+32     	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
 570:	a0 fe       	sbrs	r10, 0
 572:	06 c0       	rjmp	.+12     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 574:	b2 14       	cp	r11, r2
 576:	80 f4       	brcc	.+32     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
 578:	28 0c       	add	r2, r8
 57a:	92 2c       	mov	r9, r2
 57c:	9b 18       	sub	r9, r11
 57e:	0d c0       	rjmp	.+26     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 580:	b2 14       	cp	r11, r2
 582:	58 f4       	brcc	.+22     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 584:	b6 01       	movw	r22, r12
 586:	80 e2       	ldi	r24, 0x20	; 32
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	76 d0       	rcall	.+236    	; 0x678 <fputc>
 58c:	b3 94       	inc	r11
 58e:	f8 cf       	rjmp	.-16     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 590:	b2 14       	cp	r11, r2
 592:	18 f4       	brcc	.+6      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 594:	2b 18       	sub	r2, r11
 596:	02 c0       	rjmp	.+4      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 598:	98 2c       	mov	r9, r8
 59a:	21 2c       	mov	r2, r1
 59c:	a4 fe       	sbrs	r10, 4
 59e:	0f c0       	rjmp	.+30     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
 5a0:	b6 01       	movw	r22, r12
 5a2:	80 e3       	ldi	r24, 0x30	; 48
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	68 d0       	rcall	.+208    	; 0x678 <fputc>
 5a8:	a2 fe       	sbrs	r10, 2
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5ac:	a1 fc       	sbrc	r10, 1
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
 5b0:	88 e7       	ldi	r24, 0x78	; 120
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
 5b6:	88 e5       	ldi	r24, 0x58	; 88
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	b6 01       	movw	r22, r12
 5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5be:	8a 2d       	mov	r24, r10
 5c0:	86 78       	andi	r24, 0x86	; 134
 5c2:	51 f0       	breq	.+20     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5c4:	a1 fe       	sbrs	r10, 1
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
 5c8:	8b e2       	ldi	r24, 0x2B	; 43
 5ca:	01 c0       	rjmp	.+2      	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	a7 fc       	sbrc	r10, 7
 5d0:	8d e2       	ldi	r24, 0x2D	; 45
 5d2:	b6 01       	movw	r22, r12
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	50 d0       	rcall	.+160    	; 0x678 <fputc>
 5d8:	89 14       	cp	r8, r9
 5da:	30 f4       	brcc	.+12     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5dc:	b6 01       	movw	r22, r12
 5de:	80 e3       	ldi	r24, 0x30	; 48
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	4a d0       	rcall	.+148    	; 0x678 <fputc>
 5e4:	9a 94       	dec	r9
 5e6:	f8 cf       	rjmp	.-16     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5e8:	8a 94       	dec	r8
 5ea:	f3 01       	movw	r30, r6
 5ec:	e8 0d       	add	r30, r8
 5ee:	f1 1d       	adc	r31, r1
 5f0:	80 81       	ld	r24, Z
 5f2:	b6 01       	movw	r22, r12
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	40 d0       	rcall	.+128    	; 0x678 <fputc>
 5f8:	81 10       	cpse	r8, r1
 5fa:	f6 cf       	rjmp	.-20     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5fc:	22 20       	and	r2, r2
 5fe:	09 f4       	brne	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 600:	4e ce       	rjmp	.-868    	; 0x29e <vfprintf+0x4c>
 602:	b6 01       	movw	r22, r12
 604:	80 e2       	ldi	r24, 0x20	; 32
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	37 d0       	rcall	.+110    	; 0x678 <fputc>
 60a:	2a 94       	dec	r2
 60c:	f7 cf       	rjmp	.-18     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 60e:	f6 01       	movw	r30, r12
 610:	86 81       	ldd	r24, Z+6	; 0x06
 612:	97 81       	ldd	r25, Z+7	; 0x07
 614:	02 c0       	rjmp	.+4      	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
 616:	8f ef       	ldi	r24, 0xFF	; 255
 618:	9f ef       	ldi	r25, 0xFF	; 255
 61a:	2b 96       	adiw	r28, 0x0b	; 11
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	bf 90       	pop	r11
 638:	af 90       	pop	r10
 63a:	9f 90       	pop	r9
 63c:	8f 90       	pop	r8
 63e:	7f 90       	pop	r7
 640:	6f 90       	pop	r6
 642:	5f 90       	pop	r5
 644:	4f 90       	pop	r4
 646:	3f 90       	pop	r3
 648:	2f 90       	pop	r2
 64a:	08 95       	ret

0000064c <strnlen_P>:
 64c:	fc 01       	movw	r30, r24
 64e:	05 90       	lpm	r0, Z+
 650:	61 50       	subi	r22, 0x01	; 1
 652:	70 40       	sbci	r23, 0x00	; 0
 654:	01 10       	cpse	r0, r1
 656:	d8 f7       	brcc	.-10     	; 0x64e <strnlen_P+0x2>
 658:	80 95       	com	r24
 65a:	90 95       	com	r25
 65c:	8e 0f       	add	r24, r30
 65e:	9f 1f       	adc	r25, r31
 660:	08 95       	ret

00000662 <strnlen>:
 662:	fc 01       	movw	r30, r24
 664:	61 50       	subi	r22, 0x01	; 1
 666:	70 40       	sbci	r23, 0x00	; 0
 668:	01 90       	ld	r0, Z+
 66a:	01 10       	cpse	r0, r1
 66c:	d8 f7       	brcc	.-10     	; 0x664 <strnlen+0x2>
 66e:	80 95       	com	r24
 670:	90 95       	com	r25
 672:	8e 0f       	add	r24, r30
 674:	9f 1f       	adc	r25, r31
 676:	08 95       	ret

00000678 <fputc>:
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	fb 01       	movw	r30, r22
 682:	23 81       	ldd	r18, Z+3	; 0x03
 684:	21 fd       	sbrc	r18, 1
 686:	03 c0       	rjmp	.+6      	; 0x68e <fputc+0x16>
 688:	8f ef       	ldi	r24, 0xFF	; 255
 68a:	9f ef       	ldi	r25, 0xFF	; 255
 68c:	2c c0       	rjmp	.+88     	; 0x6e6 <fputc+0x6e>
 68e:	22 ff       	sbrs	r18, 2
 690:	16 c0       	rjmp	.+44     	; 0x6be <fputc+0x46>
 692:	46 81       	ldd	r20, Z+6	; 0x06
 694:	57 81       	ldd	r21, Z+7	; 0x07
 696:	24 81       	ldd	r18, Z+4	; 0x04
 698:	35 81       	ldd	r19, Z+5	; 0x05
 69a:	42 17       	cp	r20, r18
 69c:	53 07       	cpc	r21, r19
 69e:	44 f4       	brge	.+16     	; 0x6b0 <fputc+0x38>
 6a0:	a0 81       	ld	r26, Z
 6a2:	b1 81       	ldd	r27, Z+1	; 0x01
 6a4:	9d 01       	movw	r18, r26
 6a6:	2f 5f       	subi	r18, 0xFF	; 255
 6a8:	3f 4f       	sbci	r19, 0xFF	; 255
 6aa:	31 83       	std	Z+1, r19	; 0x01
 6ac:	20 83       	st	Z, r18
 6ae:	8c 93       	st	X, r24
 6b0:	26 81       	ldd	r18, Z+6	; 0x06
 6b2:	37 81       	ldd	r19, Z+7	; 0x07
 6b4:	2f 5f       	subi	r18, 0xFF	; 255
 6b6:	3f 4f       	sbci	r19, 0xFF	; 255
 6b8:	37 83       	std	Z+7, r19	; 0x07
 6ba:	26 83       	std	Z+6, r18	; 0x06
 6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <fputc+0x6e>
 6be:	8b 01       	movw	r16, r22
 6c0:	ec 01       	movw	r28, r24
 6c2:	fb 01       	movw	r30, r22
 6c4:	00 84       	ldd	r0, Z+8	; 0x08
 6c6:	f1 85       	ldd	r31, Z+9	; 0x09
 6c8:	e0 2d       	mov	r30, r0
 6ca:	19 95       	eicall
 6cc:	89 2b       	or	r24, r25
 6ce:	e1 f6       	brne	.-72     	; 0x688 <fputc+0x10>
 6d0:	d8 01       	movw	r26, r16
 6d2:	16 96       	adiw	r26, 0x06	; 6
 6d4:	8d 91       	ld	r24, X+
 6d6:	9c 91       	ld	r25, X
 6d8:	17 97       	sbiw	r26, 0x07	; 7
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	17 96       	adiw	r26, 0x07	; 7
 6de:	9c 93       	st	X, r25
 6e0:	8e 93       	st	-X, r24
 6e2:	16 97       	sbiw	r26, 0x06	; 6
 6e4:	ce 01       	movw	r24, r28
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	0f 91       	pop	r16
 6ee:	08 95       	ret

000006f0 <__ultoa_invert>:
 6f0:	fa 01       	movw	r30, r20
 6f2:	aa 27       	eor	r26, r26
 6f4:	28 30       	cpi	r18, 0x08	; 8
 6f6:	51 f1       	breq	.+84     	; 0x74c <__ultoa_invert+0x5c>
 6f8:	20 31       	cpi	r18, 0x10	; 16
 6fa:	81 f1       	breq	.+96     	; 0x75c <__ultoa_invert+0x6c>
 6fc:	e8 94       	clt
 6fe:	6f 93       	push	r22
 700:	6e 7f       	andi	r22, 0xFE	; 254
 702:	6e 5f       	subi	r22, 0xFE	; 254
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	af 4f       	sbci	r26, 0xFF	; 255
 70c:	b1 e0       	ldi	r27, 0x01	; 1
 70e:	3e d0       	rcall	.+124    	; 0x78c <__ultoa_invert+0x9c>
 710:	b4 e0       	ldi	r27, 0x04	; 4
 712:	3c d0       	rcall	.+120    	; 0x78c <__ultoa_invert+0x9c>
 714:	67 0f       	add	r22, r23
 716:	78 1f       	adc	r23, r24
 718:	89 1f       	adc	r24, r25
 71a:	9a 1f       	adc	r25, r26
 71c:	a1 1d       	adc	r26, r1
 71e:	68 0f       	add	r22, r24
 720:	79 1f       	adc	r23, r25
 722:	8a 1f       	adc	r24, r26
 724:	91 1d       	adc	r25, r1
 726:	a1 1d       	adc	r26, r1
 728:	6a 0f       	add	r22, r26
 72a:	71 1d       	adc	r23, r1
 72c:	81 1d       	adc	r24, r1
 72e:	91 1d       	adc	r25, r1
 730:	a1 1d       	adc	r26, r1
 732:	20 d0       	rcall	.+64     	; 0x774 <__ultoa_invert+0x84>
 734:	09 f4       	brne	.+2      	; 0x738 <__ultoa_invert+0x48>
 736:	68 94       	set
 738:	3f 91       	pop	r19
 73a:	2a e0       	ldi	r18, 0x0A	; 10
 73c:	26 9f       	mul	r18, r22
 73e:	11 24       	eor	r1, r1
 740:	30 19       	sub	r19, r0
 742:	30 5d       	subi	r19, 0xD0	; 208
 744:	31 93       	st	Z+, r19
 746:	de f6       	brtc	.-74     	; 0x6fe <__ultoa_invert+0xe>
 748:	cf 01       	movw	r24, r30
 74a:	08 95       	ret
 74c:	46 2f       	mov	r20, r22
 74e:	47 70       	andi	r20, 0x07	; 7
 750:	40 5d       	subi	r20, 0xD0	; 208
 752:	41 93       	st	Z+, r20
 754:	b3 e0       	ldi	r27, 0x03	; 3
 756:	0f d0       	rcall	.+30     	; 0x776 <__ultoa_invert+0x86>
 758:	c9 f7       	brne	.-14     	; 0x74c <__ultoa_invert+0x5c>
 75a:	f6 cf       	rjmp	.-20     	; 0x748 <__ultoa_invert+0x58>
 75c:	46 2f       	mov	r20, r22
 75e:	4f 70       	andi	r20, 0x0F	; 15
 760:	40 5d       	subi	r20, 0xD0	; 208
 762:	4a 33       	cpi	r20, 0x3A	; 58
 764:	18 f0       	brcs	.+6      	; 0x76c <__ultoa_invert+0x7c>
 766:	49 5d       	subi	r20, 0xD9	; 217
 768:	31 fd       	sbrc	r19, 1
 76a:	40 52       	subi	r20, 0x20	; 32
 76c:	41 93       	st	Z+, r20
 76e:	02 d0       	rcall	.+4      	; 0x774 <__ultoa_invert+0x84>
 770:	a9 f7       	brne	.-22     	; 0x75c <__ultoa_invert+0x6c>
 772:	ea cf       	rjmp	.-44     	; 0x748 <__ultoa_invert+0x58>
 774:	b4 e0       	ldi	r27, 0x04	; 4
 776:	a6 95       	lsr	r26
 778:	97 95       	ror	r25
 77a:	87 95       	ror	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	ba 95       	dec	r27
 782:	c9 f7       	brne	.-14     	; 0x776 <__ultoa_invert+0x86>
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	61 05       	cpc	r22, r1
 788:	71 05       	cpc	r23, r1
 78a:	08 95       	ret
 78c:	9b 01       	movw	r18, r22
 78e:	ac 01       	movw	r20, r24
 790:	0a 2e       	mov	r0, r26
 792:	06 94       	lsr	r0
 794:	57 95       	ror	r21
 796:	47 95       	ror	r20
 798:	37 95       	ror	r19
 79a:	27 95       	ror	r18
 79c:	ba 95       	dec	r27
 79e:	c9 f7       	brne	.-14     	; 0x792 <__ultoa_invert+0xa2>
 7a0:	62 0f       	add	r22, r18
 7a2:	73 1f       	adc	r23, r19
 7a4:	84 1f       	adc	r24, r20
 7a6:	95 1f       	adc	r25, r21
 7a8:	a0 1d       	adc	r26, r0
 7aa:	08 95       	ret

000007ac <_exit>:
 7ac:	f8 94       	cli

000007ae <__stop_program>:
 7ae:	ff cf       	rjmp	.-2      	; 0x7ae <__stop_program>
